TRACE-CMD-VIRT-SERVER(1)
========================

NAME
----
trace-cmd-virt-server - listen for incoming connection to record tracing of
                        guests' clients

SYNOPSIS
--------
*trace-cmd virt-server ['OPTIONS']

DESCRIPTION
-----------
The trace-cmd(1) virt-server sets up UNIX domain socket I/F for communicating
with guests' clients that run 'trace-cmd-record(1)' with the *--virt* option.
When a connection is made, and the guest's client sends data, it will create a
file called 'trace.DOMAIN.dat'. Where DOMAIN is the name of the guest named
by libvirt.

OPTIONS
-------
*-D*::
    This options causes trace-cmd listen to go into a daemon mode and run in
    the background.

*-d* 'dir'::
    This option specifies a directory to write the data files into.

*-o* 'filename'::
    This option overrides the default 'trace' in the 'trace.DOMAIN.dat' that
    is created when guest's client connects.

*-l* 'filename'::
    This option writes the output messages to a log file instead of standard output.

*--dom* 'domain'::
    This option makes a directory for the 'domain'. You can use additional options
    *-m*, *-g*, *-c* after this option for the 'domain'. If you don't use these
    additional options, the directory is made as 0710 and qemu group and
    trace data I/Fs(trace-path-cpu*.{in,out}) are not created.

*-m* 'permission'::
    This option changes the permission of 'domain' directory. If you don't use
    this option, the default permission is 0710.

*-g* 'group'::
    This option changes group of 'domain' directory. If you don't use this option,
    the default group is qemu.

*-c* 'cpu'::
    This option creates trace data I/Fs(trace-path-cpu*.{in,out}) for each CPU
    of 'domain'. If you don't use this option, those files are not created.

SET UP
------
Here, an example is written as follows:

1. Run virt-server on a host
   # trace-cmd virt-server --dom guest1 -c 2

2. Set up of virtio-serial pipe of guest1 on the host
   Add the following tags to domain XML files.
   # virsh edit guest1
   <channel type='unix'>
      <source mode='connect' path='VAR_DIR/lib/trace-cmd/virt/agent-ctl-path'/>
      <target type='virtio' name='agent-ctl-path'/>
   </channel>
   <channel type='pipe'>
      <source path='VAR_DIR/lib/trace-cmd/virt/guest1/trace-path-cpu0'/>
      <target type='virtio' name='trace-path-cpu0'/>
   </channel>
   <channel type='pipe'>
      <source path='VAR_DIR/lib/trace-cmd/virt/guest1/trace-path-cpu1'/>
      <target type='virtio' name='trace-path-cpu1'/>
   </channel>

3. Boot the guest
   # virsh start guest1

4. Run the guest1's client(see trace-cmd-record(1) with the *--virt* option)
   # trace-cmd record -e sched* --virt

If you want to boot another guest sends trace-data via virtio-serial,
you will manually make the guest domain directory and trace data I/Fs.

- Make guest domain directory on the host
   # mkdir -p VAR_DIR/lib/trace-cmd/virt/<DOMAIN>
   # chmod 710 VAR_DIR/lib/trace-cmd/virt/<DOMAIN>
   # chgrp qemu VAR_DIR/lib/trace-cmd/virt/<DOMAIN>

- Make FIFO on the host
   # mkfifo VAR_DIR/lib/trace-cmd/virt/<DOMAIN>/trace-path-cpu{0,1,...,X}.{in,out}

SEE ALSO
--------
trace-cmd(1), trace-cmd-record(1), trace-cmd-report(1), trace-cmd-start(1),
trace-cmd-stop(1), trace-cmd-extract(1), trace-cmd-reset(1),
trace-cmd-split(1), trace-cmd-list(1)

AUTHOR
------
Written by Yoshihiro YUNOMAE, <yoshihiro.yunomae.ex@hitachi.com>

RESOURCES
---------
git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git

COPYING
-------
Copyright \(C) 2013 Hitachi, Ltd. Free use of this software is granted under
the terms of the GNU Public License (GPL).

